# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:10

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/app

    steps:
      - checkout

      - restore_cache:
          keys:
            - terraform_bin-{{ checksum "./terraform/terraform_version" }}

      - restore_cache:
          keys:
            - google_cloud_sdk_zip

      - run:
          name: install node modules
          command: |
            cd $HOME/app/functions/javascript/fetch-from-big-query && npm install
            cd $HOME/app/functions/javascript/sns-to-pubsub && npm install
            cd $HOME/app/functions/javascript/sns-to-pubsub/libs/auth-validator && npm install
            cd $HOME/app/functions/javascript/notification-service && npm install
            cd $HOME/app/functions/javascript/fraud-detector && npm install

      - run:
          name: Run linter
          command: |
            cd $HOME/app/functions/javascript/fetch-from-big-query && npm run lint
            cd $HOME/app/functions/javascript/sns-to-pubsub && npm run lint
            cd $HOME/app/functions/javascript/notification-service && npm run lint
            cd $HOME/app/functions/javascript/fraud-detector && npm run lint

      - run:
          name: Run tests
          command: |
            cd $HOME/app/functions/javascript/fetch-from-big-query && npm test
            cd $HOME/app/functions/javascript/sns-to-pubsub && npm test
            cd $HOME/app/functions/javascript/notification-service && npm test
            cd $HOME/app/functions/javascript/fraud-detector && npm test

      - run:
          name: zip artifacts
          command: |
            if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ]; then
               echo "On branch $CIRCLE_BRANCH, building artifacts."

               cd $HOME/app/functions/javascript/fetch-from-big-query
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for fetch from big query"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo GOOGLE_PROJECT_ID=$PRODUCTION_GOOGLE_PROJECT_ID >> .env
                echo BIG_QUERY_DATASET_LOCATION=$PRODUCTION_BIG_QUERY_DATASET_LOCATION >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo GOOGLE_PROJECT_ID=$STAGING_GOOGLE_PROJECT_ID >> .env
                echo BIG_QUERY_DATASET_LOCATION=$STAGING_BIG_QUERY_DATASET_LOCATION >> .env
               fi
               zip -rq $HOME/fetch_from_big_query_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/javascript/sns-to-pubsub
               echo $CIRCLE_SHA1 > last_commit.txt
               zip -rq $HOME/sns_to_pubsub_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/javascript/notification-service
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for notification service"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_NOTIFICATION_SERVICE_JSON_SECRETS >> config/production.json
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_NOTIFICATION_SERVICE_JSON_SECRETS >> config/production.json
               fi
               zip -rq $HOME/notification_service_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/javascript/fraud-detector
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for fraud detector"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo $PRODUCTION_FRAUD_DETECTOR_JSON_SECRETS >> config/production.json
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo $STAGING_FRAUD_DETECTOR_JSON_SECRETS >> config/production.json
               fi
               export GOOGLE_APPLICATION_CREDENTIALS="service-account-credentials.json"
               zip -rq $HOME/fraud_detector_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/python/sync-amplitude-data-to-big-query
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for sync amplitude data to big query"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_GCLOUD_SERVICE_KEY >> jupiter_ml_python_credentials.json
                echo $PRODUCTION_AMPLITUDE_SECRETS >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_GCLOUD_SERVICE_KEY >> jupiter_ml_python_credentials.json
                echo $STAGING_AMPLITUDE_SECRETS >> .env
               fi
               zip -rq $HOME/sync_amplitude_data_to_big_query_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/python/user-behaviour
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for user behaviour"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                 echo $PRODUCTION_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                 echo GOOGLE_PROJECT_ID=$PRODUCTION_GOOGLE_PROJECT_ID >> .env
                 echo BIG_QUERY_DATASET_LOCATION=$PRODUCTION_BIG_QUERY_DATASET_LOCATION >> .env
                 echo FRAUD_DETECTOR_ENDPOINT=$PRODUCTION_FRAUD_DETECTOR_ENDPOINT >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                 echo $STAGING_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                 echo GOOGLE_PROJECT_ID=$STAGING_GOOGLE_PROJECT_ID >> .env
                 echo BIG_QUERY_DATASET_LOCATION=$STAGING_BIG_QUERY_DATASET_LOCATION >> .env
                 echo FRAUD_DETECTOR_ENDPOINT=$STAGING_FRAUD_DETECTOR_ENDPOINT >> .env
               fi
               zip -rq $HOME/user_behaviour_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/python/pubsub-to-big-query-for-sns
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for pubsub to big query"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo GOOGLE_PROJECT_ID=$PRODUCTION_GOOGLE_PROJECT_ID >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo GOOGLE_PROJECT_ID=$STAGING_GOOGLE_PROJECT_ID >> .env
               fi
               zip -rq $HOME/pubsub_to_big_query_for_sns_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/python/funnel-analysis
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for funnel-analysis"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo GOOGLE_PROJECT_ID=$PRODUCTION_GOOGLE_PROJECT_ID >> .env
                echo BIG_QUERY_DATASET_LOCATION=$PRODUCTION_BIG_QUERY_DATASET_LOCATION >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo GOOGLE_PROJECT_ID=$STAGING_GOOGLE_PROJECT_ID >> .env
                echo BIG_QUERY_DATASET_LOCATION=$STAGING_BIG_QUERY_DATASET_LOCATION >> .env
               fi
               zip -rq $HOME/funnel_analysis_$CIRCLE_SHA1.zip .

               cd $HOME/app/functions/python/metrics
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for metrics"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo GOOGLE_PROJECT_ID=$PRODUCTION_GOOGLE_PROJECT_ID >> .env
                echo BIG_QUERY_DATASET_LOCATION=$PRODUCTION_BIG_QUERY_DATASET_LOCATION >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo GOOGLE_PROJECT_ID=$STAGING_GOOGLE_PROJECT_ID >> .env
                echo BIG_QUERY_DATASET_LOCATION=$STAGING_BIG_QUERY_DATASET_LOCATION >> .env
               fi
               zip -rq $HOME/metrics_$CIRCLE_SHA1.zip .

            fi

      - run:
          name: install gcloud cli
          command: |
            if [ ! -f google-cloud-sdk-268.0.0-linux-x86_64.tar.gz ]; then
              wget "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-268.0.0-linux-x86_64.tar.gz"
            fi
            tar xvzf google-cloud-sdk-268.0.0-linux-x86_64.tar.gz
            ./google-cloud-sdk/install.sh --rc-path=~/bin/google

      - save_cache:
          key: google_cloud_sdk_zip
          paths:
            - google-cloud-sdk-268.0.0-linux-x86_64.tar.gz

      - run:
          name: set gcloud config
          command: |
            cd $HOME

            if [ $CIRCLE_BRANCH == 'master' ]; then
              echo $PRODUCTION_GCLOUD_SERVICE_KEY | ./app/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=-
              ./app/google-cloud-sdk/bin/gcloud --quiet config set project ${PRODUCTION_GOOGLE_PROJECT_ID}
              ./app/google-cloud-sdk/bin/gcloud --quiet config set compute/zone ${PRODUCTION_GOOGLE_COMPUTE_ZONE}
            fi

            if [ $CIRCLE_BRANCH == 'staging' ]; then
              echo $STAGING_GCLOUD_SERVICE_KEY | ./app/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=-
              ./app/google-cloud-sdk/bin/gcloud --quiet config set project ${STAGING_GOOGLE_PROJECT_ID}
              ./app/google-cloud-sdk/bin/gcloud --quiet config set compute/zone ${STAGING_GOOGLE_COMPUTE_ZONE}
            fi

      - run:
          name: upload zipped artifacts to cloud storage
          command: |
            if [ $CIRCLE_BRANCH == 'master' ]; then
              echo "On branch $CIRCLE_BRANCH, uploading artifacts."
              cd $HOME
              ./app/google-cloud-sdk/bin/gsutil cp fetch_from_big_query_$CIRCLE_SHA1.zip gs://prod-fetch-from-big-query-bucket
              ./app/google-cloud-sdk/bin/gsutil cp sns_to_pubsub_$CIRCLE_SHA1.zip gs://prod-sns-to-pubsub-bucket
              ./app/google-cloud-sdk/bin/gsutil cp notification_service_$CIRCLE_SHA1.zip gs://prod-notification-service-bucket
              ./app/google-cloud-sdk/bin/gsutil cp fraud_detector_$CIRCLE_SHA1.zip gs://prod-fraud-detector-bucket
              ./app/google-cloud-sdk/bin/gsutil cp sync_amplitude_data_to_big_query_$CIRCLE_SHA1.zip gs://prod-sync-amplitude-data-to-big-query-bucket
              ./app/google-cloud-sdk/bin/gsutil cp user_behaviour_$CIRCLE_SHA1.zip gs://prod-user-behaviour-bucket
              ./app/google-cloud-sdk/bin/gsutil cp pubsub_to_big_query_for_sns_$CIRCLE_SHA1.zip gs://prod-pubsub-to-big-query-for-sns-bucket
              ./app/google-cloud-sdk/bin/gsutil cp funnel_analysis_$CIRCLE_SHA1.zip gs://prod-funnel-analysis-bucket
              ./app/google-cloud-sdk/bin/gsutil cp metrics_$CIRCLE_SHA1.zip gs://prod-metrics-bucket
            fi

            if [ $CIRCLE_BRANCH == 'staging' ]; then
              echo "On branch $CIRCLE_BRANCH, uploading artifacts."
              cd $HOME
              ./app/google-cloud-sdk/bin/gsutil cp fetch_from_big_query_$CIRCLE_SHA1.zip gs://staging-fetch-from-big-query-bucket
              ./app/google-cloud-sdk/bin/gsutil cp sns_to_pubsub_$CIRCLE_SHA1.zip gs://staging-sns-to-pubsub-bucket
              ./app/google-cloud-sdk/bin/gsutil cp notification_service_$CIRCLE_SHA1.zip gs://staging-notification-service-bucket
              ./app/google-cloud-sdk/bin/gsutil cp fraud_detector_$CIRCLE_SHA1.zip gs://staging-fraud-detector-bucket
              ./app/google-cloud-sdk/bin/gsutil cp sync_amplitude_data_to_big_query_$CIRCLE_SHA1.zip gs://staging-sync-amplitude-data-to-big-query-bucket
              ./app/google-cloud-sdk/bin/gsutil cp user_behaviour_$CIRCLE_SHA1.zip gs://staging-user-behaviour-bucket
              ./app/google-cloud-sdk/bin/gsutil cp pubsub_to_big_query_for_sns_$CIRCLE_SHA1.zip gs://staging-pubsub-to-big-query-for-sns-bucket
              ./app/google-cloud-sdk/bin/gsutil cp funnel_analysis_$CIRCLE_SHA1.zip gs://staging-funnel-analysis-bucket
              ./app/google-cloud-sdk/bin/gsutil cp metrics_$CIRCLE_SHA1.zip gs://staging-metrics-bucket
            fi

      - run:
          name: use terraform to deploy functions
          command: |
            export TF_VERSION=$(cat $HOME/app/terraform/terraform_version)
            cd $HOME/app
            chmod +x ./audit_iam.sh
            ./audit_iam.sh

            if [ ! -f /tmp/terraform/terraform ]; then
              wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/$TF_VERSION/terraform_$(echo "$TF_VERSION")_linux_amd64.zip
              unzip /tmp/terraform.zip -d /tmp/terraform
            fi

            export PATH="/tmp/terraform:$PATH"
            cd $HOME/app/terraform

            if [ $CIRCLE_BRANCH == 'master' ]; then
              echo "creating credentials file to be used by terraform to access GCP from Circle CI variables"
              echo $PRODUCTION_GCLOUD_SERVICE_KEY >> google_credentials_for_terraform.json
            fi

            if [ $CIRCLE_BRANCH == 'staging' ]; then
              echo $STAGING_GCLOUD_SERVICE_KEY >> google_credentials_for_terraform.json
            fi

            if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ] ; then
              export GOOGLE_APPLICATION_CREDENTIALS="google_credentials_for_terraform.json"
              terraform init

              terraform workspace select $CIRCLE_BRANCH

              terraform plan -var "deploy_code_commit_hash=$CIRCLE_SHA1" -var "credentials_file=google_credentials_for_terraform.json"
              terraform apply -auto-approve -var "deploy_code_commit_hash=$CIRCLE_SHA1" -var "credentials_file=google_credentials_for_terraform.json"
            fi

      - save_cache:
          key: terraform_bin-{{ checksum "./terraform/terraform_version" }}
          paths:
            - /tmp/terraform