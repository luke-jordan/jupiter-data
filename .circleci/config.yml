# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  gcp-cli: circleci/gcp-cli@1.8.4

workflows:
  test_train_deploy:
    jobs:
      - deploy_functions:
          filters:
            branches:
              ignore: refactor/ml-package-1
      - train_models:
          filters:
            branches:
              only: refactor/ml-package-1

jobs:
  train_models:
    docker:
      - image: google/cloud-sdk

    working_directory: ~/app

    steps:
      - checkout
   
      - run:
          name: Set basic environment
          command: |
            if [ $CIRCLE_BRANCH == 'master' ]; then
              echo "Setting variables for master branch"
              GCLOUD_SERVICE_KEY=$PRODUCTION_GCLOUD_SERVICE_KEY
              GOOGLE_PROJECT_ID=$PRODUCTION_GOOGLE_PROJECT_ID
              GOOGLE_COMPUTE_ZONE=$PRODUCTION_GOOGLE_COMPUTE_ZONE
            fi

            if [ $CIRCLE_BRANCH == 'refactor/ml-package-1' ]; then
              echo "export GCLOUD_SERVICE_KEY=\$STAGING_GCLOUD_SERVICE_KEY" >> $BASH_ENV
              echo "export GOOGLE_PROJECT_ID=\$STAGING_GOOGLE_PROJECT_ID" >> $BASH_ENV
              echo "export GOOGLE_COMPUTE_ZONE=\$STAGING_GOOGLE_COMPUTE_ZONE" >> $BASH_ENV
            fi

      - run:
          name: Set up gcloud
          command: |
            echo "Project ID set: $GOOGLE_PROJECT_ID"

            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

      - run:
          name: Tell GCP to initiate boost inducement
          command: |
            cd $HOME/app/packages

            TRAINER_PACKAGE_PATH="$PWD/boost_target_trainer"
            MAIN_TRAINER_MODULE="boost_target_trainer.task"
            # STORAGE_BUCKET="gs://jupiter_models_${CIRCLE_BRANCH}"
            STORAGE_BUCKET="gs://jupiter_models_staging"
            
            JOB_NAME=boost_induce_training_job_$(date -u +%y%m%d_%H%M%S)
            JOB_DIR="gs://jupiter_models_staging/boost_inducement/"
            [[ $CIRCLE_BRANCH = "master" ]] && REGION=$MASTER_GOOGLE_COMPUTE_ZONE || REGION=$STAGING_GOOGLE_COMPUTE_ZONE

            gcloud ai-platform jobs submit training $JOB_NAME \
              --staging-bucket $STORAGE_BUCKET \
              --job-dir $JOB_DIR \
              --package-path $TRAINER_PACKAGE_PATH \
              --module-name $MAIN_TRAINER_MODULE \
              --region $REGION \
              --runtime-version 2.1 \
              --python-version 3.7 \
              -- \
              --project_id $GOOGLE_PROJECT_ID \
              --storage_bucket $STORAGE_BUCKET


  deploy_functions:
    docker:
      - image: circleci/node:10

    working_directory: ~/app

    steps:
      - checkout

      - restore_cache:
          keys:
            - terraform_bin-{{ checksum "./terraform/terraform_version" }}

      - restore_cache:
          keys:
            - google_cloud_sdk_zip

      - run:
          name: install node modules
          command: |
            cd $HOME/app/functions/javascript/sns-to-pubsub && npm install
            cd $HOME/app/functions/javascript/sns-to-pubsub/libs/auth-validator && npm install
            cd $HOME/app/functions/javascript/notification-service && npm install
            cd $HOME/app/functions/javascript/fraud-detector && npm install

      - run:
          name: Run linter
          command: |
            cd $HOME/app/functions/javascript/sns-to-pubsub && npm run lint
            cd $HOME/app/functions/javascript/notification-service && npm run lint
            cd $HOME/app/functions/javascript/fraud-detector && npm run lint

      - run:
          name: Run tests
          command: |
            cd $HOME/app/functions/javascript/sns-to-pubsub && npm test
            cd $HOME/app/functions/javascript/notification-service && npm test
            cd $HOME/app/functions/javascript/fraud-detector && npm test

      - run:
          name: zip artifacts
          command: |
            if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ]; then
               echo "On branch $CIRCLE_BRANCH, building artifacts."

               cd $HOME/app/functions/javascript/sns-to-pubsub
               echo $CIRCLE_SHA1 > last_commit.txt
               zip -rq $HOME/sns_to_pubsub_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/javascript/notification-service
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for notification service"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_NOTIFICATION_SERVICE_JSON_SECRETS >> config/production.json
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_NOTIFICATION_SERVICE_JSON_SECRETS >> config/production.json
               fi
               zip -rq $HOME/notification_service_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/javascript/fraud-detector
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for fraud detector"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo $PRODUCTION_FRAUD_DETECTOR_JSON_SECRETS >> config/production.json
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo $STAGING_FRAUD_DETECTOR_JSON_SECRETS >> config/production.json
               fi
               zip -rq $HOME/fraud_detector_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/python/sync-amplitude-data-to-big-query
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for sync amplitude data to big query"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_GCLOUD_SERVICE_KEY >> jupiter_ml_python_credentials.json
                echo $PRODUCTION_AMPLITUDE_SECRETS >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_GCLOUD_SERVICE_KEY >> jupiter_ml_python_credentials.json
                echo $STAGING_AMPLITUDE_SECRETS >> .env
               fi
               zip -rq $HOME/sync_amplitude_data_to_big_query_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/python/user-behaviour
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for user behaviour"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                 echo $PRODUCTION_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                 echo GOOGLE_PROJECT_ID=$PRODUCTION_GOOGLE_PROJECT_ID >> .env
                 echo BIG_QUERY_DATASET_LOCATION=$PRODUCTION_BIG_QUERY_DATASET_LOCATION >> .env
                 echo FRAUD_DETECTOR_ENDPOINT=$PRODUCTION_FRAUD_DETECTOR_ENDPOINT >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                 echo $STAGING_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                 echo GOOGLE_PROJECT_ID=$STAGING_GOOGLE_PROJECT_ID >> .env
                 echo BIG_QUERY_DATASET_LOCATION=$STAGING_BIG_QUERY_DATASET_LOCATION >> .env
                 echo FRAUD_DETECTOR_ENDPOINT=$STAGING_FRAUD_DETECTOR_ENDPOINT >> .env
               fi
               zip -rq $HOME/user_behaviour_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/python/pubsub-to-big-query-for-sns
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for pubsub to big query"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo GOOGLE_PROJECT_ID=$PRODUCTION_GOOGLE_PROJECT_ID >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo GOOGLE_PROJECT_ID=$STAGING_GOOGLE_PROJECT_ID >> .env
               fi
               zip -rq $HOME/pubsub_to_big_query_for_sns_$CIRCLE_SHA1.zip .


               cd $HOME/app/functions/python/funnel-analysis
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for funnel-analysis"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo GOOGLE_PROJECT_ID=$PRODUCTION_GOOGLE_PROJECT_ID >> .env
                echo BIG_QUERY_DATASET_LOCATION=$PRODUCTION_BIG_QUERY_DATASET_LOCATION >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo GOOGLE_PROJECT_ID=$STAGING_GOOGLE_PROJECT_ID >> .env
                echo BIG_QUERY_DATASET_LOCATION=$STAGING_BIG_QUERY_DATASET_LOCATION >> .env
               fi
               zip -rq $HOME/funnel_analysis_$CIRCLE_SHA1.zip .

               cd $HOME/app/functions/python/metrics
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "setting environment variables for metrics"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo GOOGLE_PROJECT_ID=$PRODUCTION_GOOGLE_PROJECT_ID >> .env
                echo BIG_QUERY_DATASET_LOCATION=$PRODUCTION_BIG_QUERY_DATASET_LOCATION >> .env
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_GCLOUD_SERVICE_KEY >> service-account-credentials.json
                echo GOOGLE_PROJECT_ID=$STAGING_GOOGLE_PROJECT_ID >> .env
                echo BIG_QUERY_DATASET_LOCATION=$STAGING_BIG_QUERY_DATASET_LOCATION >> .env
               fi
               zip -rq $HOME/metrics_$CIRCLE_SHA1.zip .

               cd $HOME/app/functions/python/boost-induce-model
               echo $CIRCLE_SHA1 > last_commit.txt
               echo "Setting environment variables for boost inducement model"
               if [ $CIRCLE_BRANCH == 'master' ]; then
                echo $PRODUCTION_GCLOUD_SERVICE_KEY >> service-account-credentials.json
               fi
               if [ $CIRCLE_BRANCH == 'staging' ]; then
                echo $STAGING_GCLOUD_SERVICE_KEY >> service-account-credentials.json
               fi
               zip -rq $HOME/boost_model_$CIRCLE_SHA1.zip .

            fi

      - run:
          name: install gcloud cli
          command: |
            if [ ! -f google-cloud-sdk-268.0.0-linux-x86_64.tar.gz ]; then
              wget "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-268.0.0-linux-x86_64.tar.gz"
            fi
            tar xvzf google-cloud-sdk-268.0.0-linux-x86_64.tar.gz
            ./google-cloud-sdk/install.sh --rc-path=~/bin/google

      - save_cache:
          key: google_cloud_sdk_zip
          paths:
            - google-cloud-sdk-268.0.0-linux-x86_64.tar.gz

      - run:
          name: set gcloud config
          command: |
            cd $HOME

            if [ $CIRCLE_BRANCH == 'master' ]; then
              echo $PRODUCTION_GCLOUD_SERVICE_KEY | ./app/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=-
              ./app/google-cloud-sdk/bin/gcloud --quiet config set project ${PRODUCTION_GOOGLE_PROJECT_ID}
              ./app/google-cloud-sdk/bin/gcloud --quiet config set compute/zone ${PRODUCTION_GOOGLE_COMPUTE_ZONE}
            fi

            if [ $CIRCLE_BRANCH == 'staging' ]; then
              echo $STAGING_GCLOUD_SERVICE_KEY | ./app/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=-
              ./app/google-cloud-sdk/bin/gcloud --quiet config set project ${STAGING_GOOGLE_PROJECT_ID}
              ./app/google-cloud-sdk/bin/gcloud --quiet config set compute/zone ${STAGING_GOOGLE_COMPUTE_ZONE}
            fi

      - run:
          name: upload zipped artifacts to cloud storage
          command: |
            export CODE_BUCKET=jupiter_cloudfunctions_${CIRCLE_BRANCH}

            if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ]; then

              echo "On branch $CIRCLE_BRANCH, uploading artifacts."
              export CODE_BUCKET=jupiter_cloudfunctions_${CIRCLE_BRANCH}

              cd $HOME
              ./app/google-cloud-sdk/bin/gsutil cp sns_to_pubsub_$CIRCLE_SHA1.zip gs://${CODE_BUCKET}/sns_to_pubsub/${CIRCLE_SHA1}.zip
              ./app/google-cloud-sdk/bin/gsutil cp notification_service_$CIRCLE_SHA1.zip gs://${CODE_BUCKET}/notification_service/${CIRCLE_SHA1}.zip
              ./app/google-cloud-sdk/bin/gsutil cp fraud_detector_$CIRCLE_SHA1.zip gs://${CODE_BUCKET}/fraud_detector/${CIRCLE_SHA1}.zip
              ./app/google-cloud-sdk/bin/gsutil cp sync_amplitude_data_to_big_query_$CIRCLE_SHA1.zip gs://${CODE_BUCKET}/sync_amplitude_data_to_big_query/${CIRCLE_SHA1}.zip
              ./app/google-cloud-sdk/bin/gsutil cp user_behaviour_$CIRCLE_SHA1.zip gs://${CODE_BUCKET}/user_behaviour/${CIRCLE_SHA1}.zip
              ./app/google-cloud-sdk/bin/gsutil cp pubsub_to_big_query_for_sns_$CIRCLE_SHA1.zip gs://${CODE_BUCKET}/pubsub_to_big_query_for_sns/${CIRCLE_SHA1}.zip
              ./app/google-cloud-sdk/bin/gsutil cp funnel_analysis_$CIRCLE_SHA1.zip gs://${CODE_BUCKET}/funnel_analysis/${CIRCLE_SHA1}.zip
              ./app/google-cloud-sdk/bin/gsutil cp metrics_$CIRCLE_SHA1.zip gs://${CODE_BUCKET}/metrics/${CIRCLE_SHA1}.zip

              ./app/google-cloud-sdk/bin/gsutil cp boost_model_$CIRCLE_SHA1.zip gs://${CODE_BUCKET}/boost_inducement/${CIRCLE_SHA1}.zip
            fi

      - run:
          name: use terraform to deploy functions
          command: |
            export TF_VERSION=$(cat $HOME/app/terraform/terraform_version)
            cd $HOME/app
            chmod +x ./audit_iam.sh
            ./audit_iam.sh

            if [ ! -f /tmp/terraform/terraform ]; then
              wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/$TF_VERSION/terraform_$(echo "$TF_VERSION")_linux_amd64.zip
              unzip /tmp/terraform.zip -d /tmp/terraform
            fi

            export PATH="/tmp/terraform:$PATH"
            cd $HOME/app/terraform

            if [ $CIRCLE_BRANCH == 'master' ]; then
              echo "creating credentials file to be used by terraform to access GCP from Circle CI variables"
              echo $PRODUCTION_GCLOUD_SERVICE_KEY >> google_credentials_for_terraform.json
            fi

            if [ $CIRCLE_BRANCH == 'staging' ]; then
              echo $STAGING_GCLOUD_SERVICE_KEY >> google_credentials_for_terraform.json
            fi

            if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ] ; then
              export GOOGLE_APPLICATION_CREDENTIALS="google_credentials_for_terraform.json"

              echo "Fetch private credentials used in some functions"
              /home/circleci/app/google-cloud-sdk/bin/gsutil cp gs://jupiter_deployment_$CIRCLE_BRANCH/jupiter-data-private-vars.tf .

              terraform init

              terraform workspace select $CIRCLE_BRANCH

              terraform plan -var "deploy_code_commit_hash=$CIRCLE_SHA1" -var "credentials_file=google_credentials_for_terraform.json"
              terraform apply -auto-approve -var "deploy_code_commit_hash=$CIRCLE_SHA1" -var "credentials_file=google_credentials_for_terraform.json"
            fi

      - save_cache:
          key: terraform_bin-{{ checksum "./terraform/terraform_version" }}
          paths:
            - /tmp/terraform
